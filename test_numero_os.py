#!/usr/bin/env python3
"""
Script de teste para verificar o sistema de n√∫meros de OS
"""

import os
import requests
import json
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

# Configura√ß√£o
BASE_URL = "http://localhost:5000"
TEST_USER = {
    "codigo": "12345",  # Substitua por um c√≥digo v√°lido
    "setor": "porteiro"  # Substitua por um setor v√°lido
}

def test_login():
    """Testa o login para obter sess√£o"""
    print("üîê Testando login...")
    
    try:
        response = requests.post(f"{BASE_URL}/api/login", json=TEST_USER)
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                print("‚úÖ Login realizado com sucesso")
                return data.get('user', {})
            else:
                print(f"‚ùå Falha no login: {data.get('message')}")
                return None
        else:
            print(f"‚ùå Erro HTTP: {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")
        return None

def test_criar_relatorio(user_data):
    """Testa a cria√ß√£o de um relat√≥rio para verificar se o n√∫mero de OS √© gerado"""
    print("\nüìù Testando cria√ß√£o de relat√≥rio...")
    
    # Dados do relat√≥rio de teste
    relatorio_data = {
        "tipo_id": 1,  # Substitua por um tipo v√°lido
        "dados": {
            "descricao": "Teste de n√∫mero de OS",
            "local": "Local de teste"
        },
        "destinatario_whatsapp": "11999999999"
    }
    
    try:
        # Fazer login primeiro
        session = requests.Session()
        login_response = session.post(f"{BASE_URL}/api/login", json=TEST_USER)
        
        if login_response.status_code != 200:
            print("‚ùå Falha no login para teste")
            return None
        
        # Criar relat√≥rio
        response = session.post(f"{BASE_URL}/api/relatorios", json=relatorio_data)
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                relatorio_id = data.get('id')
                print(f"‚úÖ Relat√≥rio criado com ID: {relatorio_id}")
                return relatorio_id
            else:
                print(f"‚ùå Falha ao criar relat√≥rio: {data.get('message')}")
                return None
        else:
            print(f"‚ùå Erro HTTP: {response.status_code}")
            print(f"Resposta: {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")
        return None

def test_buscar_relatorio(relatorio_id):
    """Testa a busca do relat√≥rio criado para verificar o n√∫mero de OS"""
    print(f"\nüîç Testando busca do relat√≥rio {relatorio_id}...")
    
    try:
        response = requests.get(f"{BASE_URL}/api/relatorios/{relatorio_id}")
        
        if response.status_code == 200:
            relatorio = response.json()
            numero_os = relatorio.get('numero_os')
            
            if numero_os:
                print(f"‚úÖ N√∫mero de OS encontrado: {numero_os}")
                return numero_os
            else:
                print("‚ùå N√∫mero de OS n√£o foi gerado")
                return None
        else:
            print(f"‚ùå Erro HTTP: {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")
        return None

def test_buscar_por_numero(numero_os):
    """Testa a busca por n√∫mero de OS"""
    print(f"\nüîç Testando busca por n√∫mero de OS: {numero_os}...")
    
    try:
        response = requests.get(f"{BASE_URL}/api/relatorios/numero/{numero_os}")
        
        if response.status_code == 200:
            relatorio = response.json()
            print(f"‚úÖ Relat√≥rio encontrado por n√∫mero de OS")
            print(f"   ID: {relatorio.get('id')}")
            print(f"   N√∫mero OS: {relatorio.get('numero_os')}")
            print(f"   Status: {relatorio.get('status')}")
            return True
        else:
            print(f"‚ùå Erro HTTP: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")
        return False

def test_filtro_numero_os(numero_os):
    """Testa o filtro por n√∫mero de OS na listagem"""
    print(f"\nüìã Testando filtro por n√∫mero de OS: {numero_os}...")
    
    try:
        response = requests.get(f"{BASE_URL}/api/relatorios?numero_os={numero_os}")
        
        if response.status_code == 200:
            data = response.json()
            relatorios = data.get('data', [])
            
            if relatorios:
                print(f"‚úÖ Filtro funcionando: {len(relatorios)} relat√≥rio(s) encontrado(s)")
                for rel in relatorios:
                    print(f"   - ID: {rel.get('id')}, OS: {rel.get('numero_os')}")
                return True
            else:
                print("‚ùå Filtro n√£o retornou resultados")
                return False
        else:
            print(f"‚ùå Erro HTTP: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")
        return False

def test_estatisticas_numero_os(numero_os):
    """Testa as estat√≠sticas com filtro por n√∫mero de OS"""
    print(f"\nüìä Testando estat√≠sticas com filtro por n√∫mero de OS: {numero_os}...")
    
    try:
        response = requests.get(f"{BASE_URL}/api/estatisticas?numero_os={numero_os}")
        
        if response.status_code == 200:
            data = response.json()
            total = data.get('total', 0)
            por_status = data.get('por_status', {})
            
            print(f"‚úÖ Estat√≠sticas funcionando:")
            print(f"   Total: {total}")
            print(f"   Por status: {por_status}")
            return True
        else:
            print(f"‚ùå Erro HTTP: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")
        return False

def main():
    """Fun√ß√£o principal de teste"""
    print("üß™ TESTE DO SISTEMA DE N√öMEROS DE OS")
    print("=" * 50)
    
    # Verificar se o servidor est√° rodando
    try:
        response = requests.get(f"{BASE_URL}/")
        if response.status_code != 200:
            print(f"‚ùå Servidor n√£o est√° respondendo (HTTP {response.status_code})")
            print("   Certifique-se de que o Flask est√° rodando em http://localhost:5000")
            return
    except Exception as e:
        print(f"‚ùå N√£o foi poss√≠vel conectar ao servidor: {e}")
        print("   Certifique-se de que o Flask est√° rodando em http://localhost:5000")
        return
    
    print("‚úÖ Servidor est√° respondendo")
    
    # Testar login
    user_data = test_login()
    if not user_data:
        print("\n‚ùå Teste interrompido: falha no login")
        return
    
    # Testar cria√ß√£o de relat√≥rio
    relatorio_id = test_criar_relatorio(user_data)
    if not relatorio_id:
        print("\n‚ùå Teste interrompido: falha na cria√ß√£o do relat√≥rio")
        return
    
    # Testar busca do relat√≥rio
    numero_os = test_buscar_relatorio(relatorio_id)
    if not numero_os:
        print("\n‚ùå Teste interrompido: n√∫mero de OS n√£o foi gerado")
        return
    
    # Testar busca por n√∫mero de OS
    if not test_buscar_por_numero(numero_os):
        print("\n‚ùå Teste falhou: busca por n√∫mero de OS")
        return
    
    # Testar filtro na listagem
    if not test_filtro_numero_os(numero_os):
        print("\n‚ùå Teste falhou: filtro por n√∫mero de OS")
        return
    
    # Testar estat√≠sticas
    if not test_estatisticas_numero_os(numero_os):
        print("\n‚ùå Teste falhou: estat√≠sticas com filtro por n√∫mero de OS")
        return
    
    print("\n" + "=" * 50)
    print("üéâ TODOS OS TESTES PASSARAM COM SUCESSO!")
    print("‚úÖ Sistema de n√∫meros de OS est√° funcionando perfeitamente")
    print(f"‚úÖ N√∫mero de OS gerado: {numero_os}")
    print("=" * 50)

if __name__ == '__main__':
    main()

